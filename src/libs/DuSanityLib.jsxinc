/*
DuSanityLib
Library for checking After Effects Project Sanity.
Copyright (c)2020 Nicolas Dufresne, Rainbox Laboratory
https://rainboxlab.org

_Contributors:_
Nicolas Dufresne - Lead developer

This file is part of DuAEF.

DuAEF is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

DuAEF is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with DuAEF. If not, see <http://www.gnu.org/licenses/>.
*/

/**
* Project sanity tests
* @namespace
* @memberof DuAEF
*/
DuAEF.DuSanity = {};

//internal use: ui elements
DuAEF.DuSanity.compNamesText = null;
DuAEF.DuSanity.layerNamesText = null;
DuAEF.DuSanity.expressionText = null;
DuAEF.DuSanity.projectSizeText = null;
DuAEF.DuSanity.numItemsText = null;
DuAEF.DuSanity.memoryText = null;
DuAEF.DuSanity.MPText = null;
DuAEF.DuSanity.saveText = null;
DuAEF.DuSanity.itemSourcesText = null;
DuAEF.DuSanity.notUsedText = null;
DuAEF.DuSanity.precompsText = null;
DuAEF.DuSanity.notUsedCompsText = null;
DuAEF.DuSanity.hasUI = false;
DuAEF.DuSanity.button = null;

/**
 * Enum for sanity levels.
 * @readonly
 * @enum {int}
 */
DuAEF.DuSanity.Levels =
{
    UNKNOWN: -1,
    OK: 0,
    INFO: 0.5,
    WARNING: 1,
    BAD: 2,
    CRITICAL: 3,
    FATAL: 4
}

DuAEF.DuSanity.currentLevel = DuAEF.DuSanity.Levels.UNKNOWN;

DuAEF.DuSanity.createUI = function (container)
{
    var ui_reportMainGroup = DuAEF.DuScriptUI.addGroup(container, "row");
    var ui_reportLeftGroup = DuAEF.DuScriptUI.addGroup(ui_reportMainGroup, "column");
    var ui_reportRightGroup = DuAEF.DuScriptUI.addGroup(ui_reportMainGroup, "column");

    function createReportText(t)
    {
        DuAEF.DuScriptUI.addStaticText(ui_reportLeftGroup, t);
        var st = DuAEF.DuScriptUI.addStaticText(ui_reportRightGroup, "---------------------------------------------");
        st.minimumSize = [100,0];
        return st;
    }

    DuAEF.DuSanity.compNamesText = createReportText("Composition Names:");
    DuAEF.DuSanity.layerNamesText = createReportText("Layer Names:");
    DuAEF.DuSanity.expressionText = createReportText("Expression Engine:");
    DuAEF.DuSanity.projectSizeText = createReportText("Project Size:");
    DuAEF.DuSanity.numItemsText = createReportText("Project Items:");
    DuAEF.DuSanity.itemSourcesText = createReportText("Duplicated Footages:");
    DuAEF.DuSanity.notUsedText = createReportText("Not used Footages:");
    DuAEF.DuSanity.precompsText = createReportText("Precompositions:");
    DuAEF.DuSanity.notUsedCompsText = createReportText("Not used compositions:");
    DuAEF.DuSanity.memoryText = createReportText("Memory in use:");
    DuAEF.DuSanity.MPText = createReportText("Master properties in active comp:");
    DuAEF.DuSanity.saveText = createReportText("Time since last save:");

    DuAEF.DuSanity.hasUI = true;
}

//low-level undocumented function: checks a value against a limit and sets the results in the UI
//returns the level
DuAEF.DuSanity.checkLevel = function(value, limit, detailsText, uiText)
{
    if (value < limit*0.66)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            uiText.setText("OK");
            DuAEF.DuScriptUI.setTextColor(uiText, DuAEF.DuJS.Color.Colors.LIGHT_GREY);
        }
        return DuAEF.DuSanity.Levels.OK;
    }

    if (value < limit*0.75)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            uiText.setText("INFO (" + detailsText + ")");
            DuAEF.DuScriptUI.setTextColor(uiText, DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE);
        }
        return DuAEF.DuSanity.Levels.INFO;
    }
    
    if (value < limit)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            uiText.setText("WARNING (" + detailsText + ")");
            DuAEF.DuScriptUI.setTextColor(uiText, DuAEF.DuJS.Color.Colors.YELLOW);
        }
        return DuAEF.DuSanity.Levels.WARNING;
    }
    
    if (value < limit * 1.5)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            uiText.setText("BAD (" + detailsText + ")");
            DuAEF.DuScriptUI.setTextColor(uiText, DuAEF.DuJS.Color.Colors.ORANGE);
        }
        return DuAEF.DuSanity.Levels.BAD;
    }

    if (DuAEF.DuSanity.hasUI)
    {
        uiText.setText("CRITICAL (" + detailsText + ")");
        DuAEF.DuScriptUI.setTextColor(uiText, DuAEF.DuJS.Color.Colors.RAINBOX_RED);
    }
    return DuAEF.DuSanity.Levels.CRITICAL;
}

/**
 * Checks if the project has been saved recently.
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkSave = function ()
{
    var proj = app.project;
    var f = app.project.file;
    var limit = 1800000;

    if (!(f instanceof File))
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.saveText.setText("CRITICAL (Not saved)");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.saveText, DuAEF.DuJS.Color.Colors.RAINBOX_RED);
        }
        return DuAEF.DuSanity.Levels.CRITICAL;
    }
    
    if (!f.exists)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.saveText.setText("CRITICAL (Missing file)");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.saveText, DuAEF.DuJS.Color.Colors.RAINBOX_RED);
        }
        return DuAEF.DuSanity.Levels.CRITICAL;
    }

    var date = f.modified.getTime();
    var now = new Date().getTime();
    var elapsed =  now - date;
    var elapsedStr = Math.round(elapsed/60000) + "mn";
    var level = DuAEF.DuSanity.checkLevel(elapsed, limit, elapsedStr, DuAEF.DuSanity.saveText);
    if (DuAEF.DuSanity.hasUI)
    {
        if (level > DuAEF.DuSanity.Levels.OK) DuAEF.DuSanity.saveText.helpTip = "You should save the project at least every " + Math.round(limit/60000) + "mn";
        else DuAEF.DuSanity.saveText.helpTip = "";
    }
    return level;
}

/**
 * Checks if there are comps with the same name in the project.
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkCompNames = function ()
{
    var duplicatedNames = DuAEF.DuAE.Project.checkCompNames();
    if (duplicatedNames.length == 0)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.compNamesText.setText("OK");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.compNamesText, DuAEF.DuJS.Color.Colors.LIGHT_GREY);
        }
        return DuAEF.DuSanity.Levels.OK;
    }
    else
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.compNamesText.setText("BAD");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.compNamesText, DuAEF.DuJS.Color.Colors.ORANGE);
            var helpTip = "Some compositions have the same name:";
            for (name in duplicatedNames)
            {
                if (name == 'length') continue;
                if (duplicatedNames.hasOwnProperty(name))
                {
                    helpTip += "\n- " + name;
                }
            }
            DuAEF.DuSanity.compNamesText.helpTip = helpTip
        }
        return DuAEF.DuSanity.Levels.BAD;
    }
}

/**
 * Checks if there are layers in the active comp which have the same name.
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkLayerNames = function ()
{
    var duplicatedNames = DuAEF.DuAE.Comp.checkLayerNames();
    if (duplicatedNames.length == 0)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.layerNamesText.setText("OK");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.layerNamesText, DuAEF.DuJS.Color.Colors.LIGHT_GREY);
        }
        return DuAEF.DuSanity.Levels.OK;
    }
    else
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.layerNamesText.setText("BAD");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.layerNamesText, DuAEF.DuJS.Color.Colors.ORANGE);
            var helpTip = "Some layers have the same name:";
            for (name in duplicatedNames)
            {
                if (name == 'length') continue;
                if (duplicatedNames.hasOwnProperty(name))
                {
                    helpTip += "\n- " + name;
                    for (var i = 0, n = duplicatedNames[name].length; i < n; i++)
                    {
                        helpTip += " | " + duplicatedNames[name][i].index;
                    }
                }
            }
            DuAEF.DuSanity.layerNamesText.helpTip = helpTip
        }
        return DuAEF.DuSanity.Levels.BAD;
    }
}

/**
 * Checks the project file size.
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkProjectSize = function ()
{
    var size = DuAEF.DuAE.Project.getSize();
    var sizeLimit = 20000000;

    if (size < 0)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.projectSizeText.setText("CRITICAL (not saved)");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.projectSizeText, DuAEF.DuJS.Color.Colors.RAINBOX_RED);
        }
        return DuAEF.DuSanity.Levels.CRITICAL;
    }

    var level = DuAEF.DuSanity.checkLevel(size, sizeLimit, DuAEF.DuJS.String.fromSize(size), DuAEF.DuSanity.projectSizeText);
    if (DuAEF.DuSanity.hasUI)
    {
        if (level > DuAEF.DuSanity.Levels.OK) DuAEF.DuSanity.projectSizeText.helpTip = "Try to keep the project small (less than " + DuAEF.DuJS.String.fromSize(sizeLimit) + ")\n" + 
            "e.g. do not animate several shots in the same project, but use one project per shot.\n" + 
            "Do not use After Effects to edit compositions, make the edit in an editing shoftware, or at least use renders instead compositions in a clean and simple project.";
        else DuAEF.DuSanity.projectSizeText.helpTip = "";
    }
    return level;
}

/**
 * Checks the expression engine
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkExpressionEngine = function ()
{
    var e = DuAEF.DuAE.Project.expressionEngine();
    if (e.indexOf("javascript") == 0)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.expressionText.setText("OK (JS)");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.expressionText, DuAEF.DuJS.Color.Colors.LIGHT_GREY);
            DuAEF.DuSanity.expressionText.helpTip = "";
        }
        return DuAEF.DuSanity.Levels.OK;
    }
    else
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.expressionText.setText("BAD (ES)");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.expressionText, DuAEF.DuJS.Color.Colors.ORANGE);
            DuAEF.DuSanity.expressionText.helpTip = "The expression engine is set to \"ExtendScript legacy\".\n" +
                "Setting it to \"JavaScript\" will improve performance (see the project settings).";
        }
        return DuAEF.DuSanity.Levels.BAD;
    }
}

/**
 * Checks the number of items in the project
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkNumItems = function ()
{
    var n = app.project.numItems;
    var limit = 400;

    var level = DuAEF.DuSanity.checkLevel(n, limit, n, DuAEF.DuSanity.numItemsText);
    if (DuAEF.DuSanity.hasUI)
    {
        if (level > DuAEF.DuSanity.Levels.OK) DuAEF.DuSanity.numItemsText.helpTip = "Try to keep the project small (less than " + limit + " items)\n" + 
            "e.g. do not animate several shots in the same project, but use one project per shot.\n" + 
            "You can also remove unused items, and consolidate footage.";
        else DuAEF.DuSanity.numItemsText.helpTip = "";
    }
    return level;
}

/**
 * Checks the memory in use
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkMemory = function ()
{
    var mem = app.memoryInUse ;
    //alert(mem);
    var limit = 4294967296 ; //4GB 4294967296‬

    var level = DuAEF.DuSanity.checkLevel(mem, limit, DuAEF.DuJS.String.fromSize(mem), DuAEF.DuSanity.memoryText);
    if (DuAEF.DuSanity.hasUI)
    {
        if (level > DuAEF.DuSanity.Levels.OK) DuAEF.DuSanity.memoryText.helpTip = "Memory use is getting high.\n" + 
            "It may help to purge the cache and the memory.";
        else DuAEF.DuSanity.memoryText.helpTip = "";
    }
    return level;
}

/**
 * Checks the number of master properties in the project
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkMP = function ()
{
    var n = DuAEF.DuAE.Comp.numMasterProperties();
    var limit = 40;

    var level = DuAEF.DuSanity.checkLevel(n, limit, n, DuAEF.DuSanity.MPText);
    if (DuAEF.DuSanity.hasUI)
    {
        if (level > DuAEF.DuSanity.Levels.OK) DuAEF.DuSanity.MPText.helpTip = "Too many Master Properties in the active composition have a very bad impact on performance.";
        else DuAEF.DuSanity.MPText.helpTip = "";
    }
    return level;
}

/**
 * Checks if some items have the same source file
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkItemSources = function ()
{
    var duplicatedSources = {};
    duplicatedSources.length = 0;
    var sources = {};
    var layerNames = {};
    for (var i = 1, n = app.project.numItems; i <= n; i++)
    {
        var item = app.project.item(i);
        if (!(item instanceof FootageItem)) continue;
        var source  = item.mainSource;
        if (!(source instanceof FileSource)) continue;
        var file = source.file.fsName;
  
        if (DuAEF.DuAE.isLayeredFile(file)) continue;

        if (duplicatedSources[file])
        {
            duplicatedSources[file].push(item);
            continue;
        }
        if ( sources[file]) 
        {
            duplicatedSources[file] = [sources[file], item];
            duplicatedSources.length++;
            continue;
        }

        sources[file] = item;
    }

    if (duplicatedSources.length == 0)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.itemSourcesText.setText("OK");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.itemSourcesText, DuAEF.DuJS.Color.Colors.LIGHT_GREY);
            DuAEF.DuSanity.itemSourcesText.helpTip = "";
        }
        return DuAEF.DuSanity.Levels.OK;
    }
    else
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.itemSourcesText.setText("BAD");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.itemSourcesText, DuAEF.DuJS.Color.Colors.ORANGE);
            var helpTip = "Some items share the same sources:";
            for (file in duplicatedSources)
            {
                if (file == 'length') continue;
                if (duplicatedSources.hasOwnProperty(file))
                {
                    helpTip += "\n- " + file;
                }
            }
            DuAEF.DuSanity.itemSourcesText.helpTip = helpTip

        }
        return DuAEF.DuSanity.Levels.BAD;
    }
}

/**
 * Checks if some items are not used and should be removed
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkItemsUnused = function ()
{
    var limit = 10;
    notUsed = [];
    for (var i = 1, n = app.project.numItems; i <= n; i++)
    {
        var item = app.project.item(i);
        if (item instanceof FootageItem)
        {
            if (item.usedIn.length == 0) notUsed.push(item);
        }
    }

    var level = DuAEF.DuSanity.checkLevel(notUsed.length, limit, notUsed.length, DuAEF.DuSanity.notUsedText);
    if (DuAEF.DuSanity.hasUI)
    {
        if (level > DuAEF.DuSanity.Levels.OK) 
        {
            var helpTip = "Found some footages which are not used. You should remove them.";
            for (var i = 0, n = notUsed.length; i < n; i++)
            {
                helpTip += "\n- " + notUsed[i].name;
            }
            DuAEF.DuSanity.notUsedText.helpTip = helpTip;
        }
        else DuAEF.DuSanity.notUsedText.helpTip = "";
    }
    return level;
}

/**
 * Checks if there are precomps in the project root folder
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkPrecomps = function ()
{
    var precomps = [];
    for (var i = 1, n = app.project.numItems; i <= n; i++ )
    {
        var item = app.project.item(i);
        if (item instanceof CompItem)
        {
            if (item.parentFolder.id == app.project.rootFolder.id && item.usedIn.length != 0) precomps.push(item);
        }
    }

    if (precomps.length == 0)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.precompsText.setText("OK");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.precompsText, DuAEF.DuJS.Color.Colors.LIGHT_GREY);
            DuAEF.DuSanity.precompsText.helpTip = "";
        }
        return DuAEF.DuSanity.Levels.OK; 
    }
    else
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.precompsText.setText("INFO");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.precompsText, DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE);
            var helpTip = "Some precompositions are at the root of the project.\n" + 
                "They should be moved in a subfolder.";
            for (var i = 0, n = precomps.length; i<n; i++)
            {
                helpTip += "\n- " + precomps[i].name;
            }
            DuAEF.DuSanity.precompsText.helpTip = helpTip;
        }
        return DuAEF.DuSanity.Levels.INFO; 
    }
}

/**
 * Checks if there are not used comps in some subfolders
 * @return {DuAEF.DuSanity.Levels} The sanity level of the check.
 */
DuAEF.DuSanity.checkNotUsedComps = function ()
{
    var comps = [];
    for (var i = 1, n = app.project.numItems; i <= n; i++ )
    {
        var item = app.project.item(i);
        if (item instanceof CompItem)
        {
            if (item.parentFolder.id != app.project.rootFolder.id && item.usedIn.length == 0) comps.push(item);
        }
    }

    if (comps.length == 0)
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.notUsedCompsText.setText("OK");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.notUsedCompsText, DuAEF.DuJS.Color.Colors.LIGHT_GREY);
            DuAEF.DuSanity.notUsedCompsText.helpTip = "";
        }
        return DuAEF.DuSanity.Levels.OK; 
    }
    else
    {
        if (DuAEF.DuSanity.hasUI)
        {
            DuAEF.DuSanity.notUsedCompsText.setText("INFO");
            DuAEF.DuScriptUI.setTextColor(DuAEF.DuSanity.notUsedCompsText, DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE);
            var helpTip = "Some main compositions are stored in subfolders.\n" + 
                "It is easier to keep them at the root of the project, or they should be removed if they're not needed anymore.";
            for (var i = 0, n = comps.length; i<n; i++)
            {
                helpTip += "\n- " + comps[i].name;
            }
            DuAEF.DuSanity.notUsedCompsText.helpTip = helpTip;
        }
        return DuAEF.DuSanity.Levels.INFO; 
    }
}

/**
 * Runs all the sanity tests and updates the sanity Button
 * @return {DuAEF.DuSanity.Levels} The highest level.
 */
DuAEF.DuSanity.test = function ()
{
    var level = DuAEF.DuSanity.Levels.UNKNOWN;

    function runTest(testFunction)
    {
        var test = testFunction();
        if (test > level) level = test;
    }

    runTest(DuAEF.DuSanity.checkCompNames);
    runTest(DuAEF.DuSanity.checkLayerNames);
    runTest(DuAEF.DuSanity.checkProjectSize);
    runTest(DuAEF.DuSanity.checkExpressionEngine);
    runTest(DuAEF.DuSanity.checkNumItems);
    runTest(DuAEF.DuSanity.checkItemsUnused);
    runTest(DuAEF.DuSanity.checkPrecomps);
    runTest(DuAEF.DuSanity.checkNotUsedComps);
    runTest(DuAEF.DuSanity.checkMemory);
    runTest(DuAEF.DuSanity.checkMP);
    runTest(DuAEF.DuSanity.checkSave);
    runTest(DuAEF.DuSanity.checkItemSources);

    if (DuAEF.DuSanity.button)
    {
        if (level == DuAEF.DuSanity.Levels.UNKNOWN || level == DuAEF.DuSanity.Levels.OK)
            DuAEF.DuSanity.button.setBackgroundColor(DuAEF.DuJS.Color.Colors.VERY_DARK_GREY);
        else if (level == DuAEF.DuSanity.Levels.INFO)
            DuAEF.DuSanity.button.setBackgroundColor(DuAEF.DuJS.Color.Colors.AFTER_EFFECTS_BLUE);
        else if (level == DuAEF.DuSanity.Levels.WARNING)
            DuAEF.DuSanity.button.setBackgroundColor(DuAEF.DuJS.Color.Colors.YELLOW);
        else if (level == DuAEF.DuSanity.Levels.BAD)
            DuAEF.DuSanity.button.setBackgroundColor(DuAEF.DuJS.Color.Colors.ORANGE);
        else if (level == DuAEF.DuSanity.Levels.CRITICAL)
            DuAEF.DuSanity.button.setBackgroundColor(DuAEF.DuJS.Color.Colors.RAINBOX_RED);
        else if (level == DuAEF.DuSanity.Levels.FATAL)
            DuAEF.DuSanity.button.setBackgroundColor(DuAEF.DuJS.Color.Colors.LIGHT_PURPLE);
    }

    DuAEF.DuSanity.currentLevel = level;
    return level;
}

/**
 * Intializes the sanity tests and schedule the monitor task. Has to be called once to be able to automatically monitor the project.
 */
DuAEF.DuSanity.init = function ()
{
    //First run
    DuAEF.DuSanity.test();
    //add to events
    DuAEF.DuScriptUI.addEvent(DuAEF.DuSanity.test);
}