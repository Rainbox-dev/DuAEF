/**
	* Version handling
	* @namespace
	* @memberof DuAEF.DuJS
*/
DuAEF.DuJS.Version = {};

/**
 * Compares two versions in the standard form AA.BB.CC-BetaX
 * @param {string} vA - The first version
 * @param {string} [vB=DuAEF.scriptVersion] - The other version
 * @return {boolean} True if vA is more recent than vB
*/
DuAEF.DuJS.Version.compare = function (vA, vB)
{
	vB = def(vB, DuAEF.scriptVersion, false);
	if (vA === vB) return false;

	var vAArray = vA.split('.');
	var vBArray = vB.split('.');

	for (var i = 0; i < 3; i++)
	{
		if (i >= vBArray.length) return true;
		if (i >= vAArray.length) return false;

		var a = parseInt(vAArray[i]);
		var b = parseInt(vBArray[i]);

		//remove "alpha" or "beta" if needed
		if (i == 2)
		{
			if (isNaN(a)) a = vAArray[i].split("-")[0];
			a = parseInt(a);
			if (isNaN(b)) b = vBArray[i].split("-")[0];
			b = parseInt(b);
		}

		if (isNaN(a) && isNaN(b)) continue;
		else if (isNaN(a)) return false;
		else if (isNaN(b)) return true;

		if (a == b)
		{
			if (i == 0 || i == 1) continue;
			else 
			{
				//get the "alpha" or "beta" part
				var aa = vAArray[i].split("-");
				if (aa.length == 2) aa = aa[1].toLowerCase();
				else aa = "";
				var bb = vBArray[i].split("-");
				if (bb.length == 2) bb = bb[1].toLowerCase();
				else bb = "";

				if (aa == bb) continue;

				if (bb == "" && aa == "") return true;
				if (bb == "" && aa != "") return false;
				if (bb != "" && aa == "") return true;

				if (bb.indexOf("beta") >= 0 && aa.indexOf("beta") >= 0 ) return true;
				if (bb.indexOf("beta") >= 0 && aa.indexOf("beta") < 0 ) return false;
				if (bb.indexOf("beta") < 0 && aa.indexOf("beta") >= 0 ) return true;

				if (bb.indexOf("alpha") >= 0 && aa.indexOf("alpha") >= 0 ) return true;
				if (bb.indexOf("alpha") >= 0 && aa.indexOf("alpha") < 0 ) return false;
				if (bb.indexOf("alpha") < 0 && aa.indexOf("alpha") >= 0 ) return true;
			}

		}
		else return a > b;
		
	}

	return true;
}
